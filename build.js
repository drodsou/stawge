import {walkSync} from 'https://deno.land/std/fs/walk.ts';
import {ensureDirSync} from 'https://deno.land/std/fs/ensure_dir.ts';

import {copyDirSyncFilter} from 'https://raw.githubusercontent.com/drodsou/denolib/master/ts/copy_dir_sync_filter/mod.ts';
import {slashJoin} from 'https://raw.githubusercontent.com/drodsou/denolib/master/ts/slash_join/mod.ts';
import {unindent} from 'https://raw.githubusercontent.com/drodsou/denolib/master/ts/unindent/mod.ts';
import {red as colorRed, green as colorGreen} from 'https://deno.land/std/fmt/colors.ts';
import getUserConfig from './getUserConfig.js';

/**
 * Build: copies 'src/static' to 'dist' and generates 'src/dynamic' into 'dist'
*/
export default async function build() {
  const userConfig = await getUserConfig();
  const rootDir = slashJoin( Deno.cwd() );
  const distDirRel = userConfig.dist || '/dist' 
  const distDir = rootDir + distDirRel;
  const srcDir = rootDir + '/src';
  const srcdynDirRel = '/src/dynamic';
  const srcdynDir = rootDir + '/src/dynamic';

  // -- user function passed argument, helpers
  const util = {
    rootDir, distDir, srcDir
  }

  console.log(colorGreen(`• Copying ${srcDir + '/static'} to ${distDir}`));
  copyDirSyncFilter( srcDir + '/static', distDir);

  let srcFiles
  try {
    srcFiles = [...walkSync(srcdynDir,{ exts:['js','ts']} )]
      .map(e=> slashJoin( e.path))
      .filter(page=>!(page.replace(rootDir,'')).includes('_'));
  } catch (e) {
    console.log(colorRed(`ERROR: Processing directory: ${srcdynDir}`));
    Deno.exit(1)
  }

  // TODO: ordenar con index al final
  const allGenerated = [];

  for (const srcFile of srcFiles) {
    const srcPath = srcFile.split('/').slice(0,-1).join('/');
    let srcFunc
    try {
      srcFunc = (await import('file://' + srcFile)).default;
      if (typeof(srcFunc) !== 'function') 
        throw new Error(`File must 'export default' a function`);
    } catch (e) {
      console.log(colorRed(`ERROR: Processing file: ${srcFile}\n${e}`));
      Deno.exit(1)
    }
    let srcRes = await srcFunc(util);
    if (!Array.isArray(srcRes)) {
      srcRes = [{
        distFile: srcFile.replace(srcdynDirRel, distDirRel).replace(/\.(js|ts)/,''), 
        content: srcRes, 
        title: '',
      }]
    }
    
    srcRes.forEach(srcObj=>{
      srcObj.srcFile = srcFile;
      const distFile = srcObj.distFile;
      if (!distFile) {
        console.log(colorRed(unindent(`
          ERROR in src file: ' + ${srcFile} 
          When multiple files are returned by a src file, it must be in this form:
            [
              { 
                distFile: "absolute path to dist file in disk",
                content : "final html of the file",
                title   : not mandatory,
                date    : not mandatory,
                etc...
              },
              ... 
            ]
        `)));
        Deno.exit(1);
      }
      if (!distFile.startsWith(distDir)) {
        console.log(colorRed(unindent(`
          ERROR: Generated file must have absolute path to dist directory ${distDir}
            Generated file: ' + distFile);
            From src file : ' + srcFile);
        `)));
        Deno.exit(1);
      }

      if (allGenerated[distFile]) {
        console.log(colorRed(unindent(`
          ERROR: Dist file is being generated more than once
            Dist file    : ${distFile}
            Generated by : ${srcFile}
          gas already bn 
            Generated by : ${allGenerated[distFile].srcFile}
        `)));
        Deno.exit(1);
    }


      const distPath = distFile.split('/').slice(0,-1).join('/');
      ensureDirSync(distPath);
      console.log(colorGreen(`• Generating ${distFile}`));
      Deno.writeTextFileSync(distFile, srcObj.content);
      allGenerated[distFile] = srcObj;
    })
  }

  // console.log(allGenerated.map(a=>a.file));

} // build






